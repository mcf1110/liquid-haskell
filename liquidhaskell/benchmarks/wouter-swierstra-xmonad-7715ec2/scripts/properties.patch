4c4
< import XMonad.StackSet hiding (filter)
---
> import XMonad.StackSet
8d7
< import qualified XMonad.StackSet as S (filter)
42,43c41,42
< instance (Integral i, Integral s, Eq a, Arbitrary a, Arbitrary l, Arbitrary sd)
<         => Arbitrary (StackSet i l a s sd) where
---
> instance (Integral i, Integral s, Eq a, Arbitrary a, Arbitrary l, Arbitrary s)
>         => Arbitrary (StackSet i l a s) where
70c69
< fromList :: (Integral i, Integral s, Eq a) => (i, [sd], [Maybe Int], [[a]], l) -> StackSet i l a s sd
---
> fromList :: (Integral i, Integral s, Eq a) => (i, [s], [Maybe Int], [[a]], l) -> StackSet i l a s
87c86
< type T = StackSet (NonNegative Int) Int Char Int Int
---
> type T = StackSet (NonNegative Int) Int Char Int
477c476
<         Just s@(Stack i _ _) -> integrate' (S.filter (/= i) s) == filter (/= i) (integrate' (Just s))
---
>         Just s@(Stack _ i _) -> integrate' (filterStack (/= i) s) == filter (/= i) (integrate' (Just s))
594c593
<                    else (differentiate xs) == Just (Stack (head xs) [] (tail xs))
---
>                    else (differentiate xs) == Just (Stack [] (head xs) (tail xs))
979c978
<         ,("new fails with abort",   mytest prop_new_abort)
---
> --        ,("new fails with abort",   mytest prop_new_abort)
